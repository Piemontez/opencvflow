<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/imgs/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="OpenCV-Flow Online IDE" />
    <script
      async
      src="https://www.googletagmanager.com/gtag/js?id=UA-18861122-3"
    ></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag('js', new Date());

      gtag('config', 'UA-18861122-3');
    </script>
    <title>OpenCV-Flow!</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root" class="wrapper">
      <style>
        .bootloader-content {
          position: fixed;
          width: 100%;
          height: 70%;
          top: 0;
          display: flex;
          align-items: center;
          justify-content: center;
          flex-direction: column;
        }
        .btload-img {
          display: block;
          margin-left: auto;
          margin-right: auto;
          width: 250px;
        }
        #progressbar {
          width: 35rem;
          height: 20px;
          margin: 0;
          border: 1px solid rgba(159, 162, 185, 0.5);
          border-radius: 3px;
          background: #9c9eb1;
          box-sizing: border-box;
        }
      </style>
      <div class="bootloader-content">
        <img class="btload-img" src="./assets/imgs/startloader.gif" />
        <progress id="progressbar" value="0" max="1"></progress>
        Loading... <span id="filename"></span>
        <br />
        <div id="assetsprogress"></div>
      </div>
    </div>

    <script>
      //Created From Webpack
      window.$bootloader = {
        js:  <%= JSON.stringify(htmlWebpackPlugin.files.js.map(url => ({ size: 0, file: url.replace(htmlWebpackPlugin.files.publicPath, '')}) )) %>,
        css: <%= JSON.stringify(htmlWebpackPlugin.files.css.map(url => ({ size: 0, file: url.replace(htmlWebpackPlugin.files.publicPath, '')}) )) %>
      };
    </script>

    <script>
      var Bootloader = /** @class */ (function () {
        function Bootloader(assets) {
          this.progressMap = {};
          this.tagMap = {};
          this.assets = assets;
          this.totalSize = 0;
        }

        Bootloader.prototype.printFilesProgress = function () {
          var assetsprogress = document.getElementById('assetsprogress');
          if (assetsprogress) {
            var innerHTML = '';
            this.assets.js.forEach((js) => {
              var file =
                js.file.substr(0, js.file.indexOf('.')) +
                js.file.substr(js.file.lastIndexOf('.'));

              innerHTML += `${file}: ${this.progressMap[js.file] || 0} ${
                js.isLoaded ? ' âœ“' : ''
              } <br/>`;
            });
            assetsprogress.innerHTML = innerHTML;
          }
        };

        Bootloader.prototype.updateProgress = function (src, size) {
          if (size >= 0) {
            var currentValue = this.progressMap[src] || 0;
            if (size > currentValue) {
              this.progressMap[src] = size;
              return true;
            }
          }
          this.printFilesProgress();
          return false;
        };
        Bootloader.prototype.getProgress = function () {
          var _this = this;
          return Object.keys(this.progressMap).reduce(function (acc, src) {
            return acc + _this.progressMap[src];
          }, 0);
        };
        Bootloader.createScriptTag = function (src, id) {
          var tag = document.createElement('script');
          tag.id = id;
          tag.type = 'text/javascript';
          tag.src = src;
          return tag;
        };
        Bootloader.createCssTag = function (href, id) {
          var tag = document.createElement('link');
          tag.id = id;
          tag.rel = 'stylesheet';
          tag.href = href;
          return tag;
        };
        Bootloader.prototype.getBlob = function (asset, cb) {
          var _this = this;
          return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', asset.file, true);
            xhr.responseType = 'blob';

            xhr.onreadystatechange = function () {
              var clength = xhr.getResponseHeader('Content-Length');
              if (clength && !asset.size) {
                asset.size = clength;
                _this.totalSize += parseInt(asset.size);
              }
            };
            //set listeners
            xhr.addEventListener(
              'error',
              function (err) {
                return reject(err);
              },
              false
            );
            xhr.addEventListener(
              'progress',
              function (event) {
                if (event.lengthComputable) {
                  if (event.total) {
                    asset.isLoaded = event.total === event.loaded;
                    if (!asset.size) {
                      asset.size = event.total;
                      _this.totalSize += asset.size;
                    }
                  }
                  _this.updateProgress(asset.file, event.loaded) &&
                    cb({
                      totalSize: _this.totalSize,
                      loaded: _this.getProgress(),
                    });
                }
              },
              false
            );
            xhr.addEventListener(
              'load',
              function (event) {
                var status = xhr.status;
                if (status === 200 || (status === 0 && xhr.response)) {
                  asset.isLoaded = true;
                  _this.updateProgress(asset.file, asset.size) &&
                    cb({
                      totalSize: _this.totalSize,
                      loaded: _this.getProgress(),
                    });
                  resolve(xhr.response);
                } else {
                  reject(
                    'status: '.concat(xhr.status, ' - ').concat(xhr.statusText)
                  );
                }
              },
              false
            );
            xhr.send();
          });
        };
        Bootloader.prototype.loadAsset = function (asset, js, cb) {
          var _this = this;
          return this.getBlob(asset, cb).then(function (blob) {
            var _a;
            var assetId = 'asset_'.concat(asset.file);
            //remove asset if it exists
            var oldAsset = document.getElementById(assetId);
            oldAsset &&
              ((_a = document.head) === null || _a === void 0
                ? void 0
                : _a.removeChild(oldAsset));
            //create new asset
            var objectURL = URL.createObjectURL(blob);
            var tag = js
              ? Bootloader.createScriptTag(objectURL, assetId)
              : Bootloader.createCssTag(objectURL, assetId);
            tag.onload = tag.onerror = function () {
              //remove listeners
              tag.onload = tag.onerror = null;
              // note: if you want the file to be accessible after loading
              // then comment out bellow line
              URL.revokeObjectURL(objectURL);
            };
            _this.tagMap[asset.file] = tag;
            return asset;
          });
        };
        Bootloader.prototype.loadAssets = function (assets, js, cb) {
          var _this = this;
          var report = {
            succeeded: [],
            failed: [],
          };
          var tasks = assets.map(function (asset) {
            return _this
              .loadAsset(asset, js, cb)
              .then(function (done) {
                report.succeeded.push(done);
              })
              .catch(function (error) {
                report.failed.push({ asset: asset, error: error });
              });
          });
          return Promise.all(tasks).then(function () {
            return report;
          });
        };
        Bootloader.prototype.mergeReport = function (lr1, lr2) {
          lr2.succeeded.forEach(function (i) {
            return lr1.succeeded.push(i);
          });
          lr2.failed.forEach(function (i) {
            return lr1.failed.push(i);
          });
        };
        Bootloader.prototype.appendHtmlElements = function (assets) {
          var _a;
          for (var _i = 0, assets_1 = assets; _i < assets_1.length; _i++) {
            var asset = assets_1[_i];
            var tag = this.tagMap[asset.file];
            if (tag) {
              (_a = document.head) === null || _a === void 0
                ? void 0
                : _a.appendChild(tag);
            }
          }
        };
        Bootloader.prototype.load = function (cb) {
          var _this = this;
          var cssAssets = this.assets.css || [];
          var jsAssets = this.assets.js || [];
          var fullReport = {
            succeeded: [],
            failed: [],
          };
          return this.loadAssets(cssAssets, false, cb)
            .then(function (report) {
              _this.mergeReport(fullReport, report);
              _this.appendHtmlElements(cssAssets);
              return _this.loadAssets(jsAssets, true, cb);
            })
            .then(function (report) {
              _this.mergeReport(fullReport, report);
              _this.appendHtmlElements(jsAssets);
              return fullReport;
            });
        };
        return Bootloader;
      })();

      function bootstrap() {
        new Bootloader(window.$bootloader)
          .load(function (e) {
            var progressBar = document.getElementById('progressbar');
            if (progressBar) {
              progressBar.setAttribute('value', e.loaded.toString());
              progressBar.setAttribute('max', e.totalSize.toString());
            }
          })
          .then(function (report) {
            console.log('done', report); //TODO remove
          });
      }

      window.addEventListener('load', bootstrap);
    </script>
  </body>
</html>
